---
source: tests/command_tests.rs
info:
  program: artifacts
  args:
    - "--log-level=debug"
    - generate
    - /home/palo/dev/artifacts/nixos-artifacts/pkgs/artifacts-tui/examples/no_config
  env:
    NIXOS_ARTIFACTS_BACKEND_CONFIG: /home/palo/dev/artifacts/nixos-artifacts/pkgs/artifacts-tui/examples/no_config/backend.toml
    TMPDIR: /tmp/artifacts-tui-ci
  stdin: "one\ntwo\n"
---
success: true
exit_code: 0
----- stdout -----
DEBUG: Running nix build: "/run/current-system/sw/bin/nix" "build" "--impure" "-I" "flake=/home/palo/dev/artifacts/nixos-artifacts/pkgs/artifacts-tui/examples/no_config" "--no-link" "--print-out-paths" "--expr" "\nlet\n  system = \"x86_64-linux\";\n  filterAttrs =\n    pred: set:\n    builtins.removeAttrs set (builtins.filter (name: !pred name set.${name}) (builtins.attrNames set));\n  flake = builtins.getFlake (toString <flake>);\n  pkgs = flake.inputs.nixpkgs.legacyPackages.${system};\n  configurations = builtins.attrNames (\n    filterAttrs (\n      machine: configuration: builtins.hasAttr \"artifacts\" configuration.options\n    ) flake.nixosConfigurations\n  );\n  make = map (name: {\n    machine = name;\n    artifacts = flake.nixosConfigurations.${name}.config.artifacts.store;\n    config =\n      if (builtins.hasAttr \"config\" flake.nixosConfigurations.${name}.config.artifacts) then\n        flake.nixosConfigurations.${name}.config.artifacts.config\n      else\n        { };\n  }) configurations;\nin\npkgs.writeText \"test.json\" (builtins.toJSON make)\n"
DEBUG: make config: [{"artifacts":{"test-artifact":{"files":{"simple-secrets":{"group":"deployer","mode":"0400","name":"simple-secrets","owner":"deployer","path":"/run/secrets/simple-secrets"},"very-simple-secrets":{"group":"root","mode":"0400","name":"very-simple-secrets","owner":"root","path":"/run/secrets/very-simple-secrets"}},"generator":"/nix/store/n9rm7gfjq84rdjdi1pqg9s86gr4bz2xx-test_generator.sh","name":"test-artifact","prompts":{"secret1":{"description":"secret number 1","name":"secret1"},"secret2":{"description":"secret number 2","name":"secret2"}},"serialization":"test","shared":false}},"config":{},"machine":"machine-name"}]
[generate]
DEBUG:     files to produce -> 2 files
DEBUG:       - simple-secrets => /run/secrets/simple-secrets owner=deployer group=deployer
DEBUG:       - very-simple-secrets => /run/secrets/very-simple-secrets owner=root group=root
DEBUG:     running check_serialization: env inputs="/tmp/artifacts-tui-ci/inputs-test-artifact" machine="machine-name" artifact="test-artifact" /home/palo/dev/artifacts/nixos-artifacts/pkgs/artifacts-tui/examples/no_config/test_check.sh
$config: 
{}
DEBUG:     check_serialization: failed with status exit status: 1 -> continuing with generation
âš¡ machine-name/test-artifact
>>> DESC: secret number 1
>>> PROMPT: secret1
> 
>>> DESC: secret number 2
>>> PROMPT: secret2
> 
DEBUG: bwrap command: bwrap --unshare-all --unshare-user --uid 1000 --gid 1000 --tmpfs / --chdir / --ro-bind /nix/store /nix/store --tmpfs /usr/lib/systemd --proc /proc --dev /dev --bind /tmp/artifacts-tui-ci/prompt-test-artifact /tmp/artifacts-tui-ci/prompt-test-artifact --bind /tmp/artifacts-tui-ci/out-test-artifact /tmp/artifacts-tui-ci/out-test-artifact --ro-bind /nix/store/75yq0bmkfiqfrblfd57mfsl90j8ld0lb-test_generator.sh/bin /nix/store/75yq0bmkfiqfrblfd57mfsl90j8ld0lb-test_generator.sh/bin --ro-bind /bin /bin --ro-bind /usr/bin /usr/bin --ro-bind /tmp/artifacts-tui-ci/artifacts-tui-passwd-cc66c63dc4c7a304.txt /etc/passwd -- /bin/sh /nix/store/75yq0bmkfiqfrblfd57mfsl90j8ld0lb-test_generator.sh/bin/test_generator.sh
ðŸ’¾ serialize secrets
$config: 
{}
=== Content of /tmp/artifacts-tui-ci/out-test-artifact/simple-secrets ===
two
=========================
=== Content of /tmp/artifacts-tui-ci/out-test-artifact/very-simple-secrets ===
one
=========================

----- stderr -----
